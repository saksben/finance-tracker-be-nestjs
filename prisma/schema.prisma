// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  // email         String       @unique
  budgets       BudgetUser[]
  transactions  Transaction[]
  // createdAt     DateTime     @default(now())
  // updatedAt     DateTime     @updatedAt
}

model Budget {
  id                 Int                @id @default(autoincrement())
  name               String
  estimatedRevenue   Float
  categories         BudgetCategory[]
  // transactions       Transaction[]
  // userId             Int
  users              BudgetUser[]
  alertOverbudget    Boolean            @default(false)
  alertOverAmount    Boolean            @default(false)
  alertAmount        Float?
  overbudget         Boolean?            @default(false)
  // createdAt          DateTime          @default(now())
  // updatedAt          DateTime          @updatedAt
}

model BudgetUser {
  id        Int   @id @default(autoincrement())
  budgetId  Int
  userId    Int
  estimate  Float
  budget    Budget  @relation(fields: [budgetId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  @@unique([budgetId, userId]) // ensure unique combination of budget and user
}

model BudgetCategory {
  id          Int       @id @default(autoincrement())
  budgetId    Int
  categoryId  Int
  estimate    Float
  budget      Budget    @relation(fields: [budgetId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Transaction {
  id          Int       @id @default(autoincrement())
  date        DateTime
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  type        TransactionType
  amount      Float
  description String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  // budgetId    Int
  // budget      Budget    @relation(fields: [budgetId], references: [id])
  // createdAt   DateTime  @default(now())
  // updatedAt   DateTime  @updatedAt
}

enum TransactionType {
  Expense
  Revenue
}

model Category {
  id            Int   @id @default(autoincrement())
  name          String
  transactions  Transaction[]
  budgets       BudgetCategory[]
  // createdAt   DateTime  @default(now())
  // updatedAt   DateTime  @updatedAt
}